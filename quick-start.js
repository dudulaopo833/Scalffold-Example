import inquirer from 'inquirer';import program from 'commander';import chalk from 'chalk';import cbPackageJson from '../../../package';import { logger, ProcessMessage, initAppWithMetaInfo, designItemsWithMetaInfo,    getExistingProjectName, getExistingPages, getExistingSharedContainer, getExistingSharedComponent, getExistingPageComponents,    createExampleApp, createPlainApp, createPlainContentApp } from '../utils';const initMetaInfo = {    'sharedComponents': [        /* {            componentName: 'example',            componentType: 'Atom'        } */    ],    'sharedContainers': [        /* 'xxx', 'xxx' */    ],    'pages': [        /* {            pageName: 'example',            needService: true,            needValidation: true,            askAgain: false        } */    ],    'pageComponents': [        /* {            underPageName: 'examplePage',            componentName: 'example',            componentType: 'Atom'        } */    ],    'indexPage': 'xxx',    'command': '',    'selectedPage': ''};const createCommandAction = () => {    inquirer.prompt([{        type: 'list',        name: 'createOption',        message: 'Choose what your want: ',        choices: ['(1) Create example application', '(2) Create plain application', '(3) Create plain content application']    }]).then((answer) => {        if (answer.createOption === '(1) Create example application') {            createExampleAppAction();        } else if (answer.createOption === '(2) Create plain application') {            createPlainAppAction();        } else {            createPlainContentAppAction();        }    });};const createExampleAppAction = () => {    const processingMessage = new ProcessMessage();    processingMessage.start();    createExampleApp();    processingMessage.complete();    logger.info(`We already git clone ${chalk.yellow('group-digital-wealth-example-app')} and ${chalk.yellow('group-digital-wealth-example-app-content')} into current workspace.`);    logger.info(`Step 1: Please go to group-digital-wealth-example-app-content folder and run ${chalk.yellow('yarn install')}' first and then run ${chalk.yellow('yarn dev')}' to start up the content server.`);    logger.info(`Step 2: Please go to group-digital-wealth-example-app folder and run ${chalk.yellow('yarn install')}' first and then run ${chalk.yellow('yarn dev')}' to start up the app server.`);    logger.info('Step 3: Please open chrome broswer and go to http://localhost:3000 to open the example app to view.');    process.exit();};const createPlainAppAction = () => {    inquirer.prompt(askProjectDetailsForCreation).then((answers) => {        const applicationJsonData = {            name: answers.projectName.trim(),            description: answers.projectDescription,            gitRepository: answers.gitRepository        };        const processingMessage = new ProcessMessage();        processingMessage.start();        createPlainApp(applicationJsonData); // Create project and cd to that folder        processingMessage.complete();        logger.info(`Please use ${chalk.yellow(`cd ${answers.projectName} `)} command to jump into your project folder`);        logger.info(`Please use ${chalk.yellow('dw-dev init')} command to initialize your project`);        logger.info(`Please use ${chalk.yellow('dw-dev design')} command to design page or shared component/container`);        logger.info(`You can use ${chalk.yellow('dw-dev -h')} command to list out the commands of dw-dev. `);        process.exit();    });};const createPlainContentAppAction = () => {    inquirer.prompt(askProjectDetailsForCreation).then((answers) => {        const contentJsonData = {            name: answers.projectName.trim(),            description: answers.projectDescription,            gitRepository: answers.gitRepository        };        const processingMessage = new ProcessMessage();        processingMessage.start();        createPlainContentApp(contentJsonData); // Create project and cd to that folder        processingMessage.complete();        logger.info(`Please use ${chalk.yellow(`cd ${answers.projectName} `)} command to jump into your content project folder.`);        logger.info(`You can use ${chalk.yellow('yarn run dwc')} command to select what you want to do. `);        process.exit();    });};const askProjectDetailsForCreation = [    {        type: 'input',        name: 'projectName',        message: 'Please input your project name: ',        default: '?', // Set default value to judge if enter project name or not        validate: (value) => {            if (value === '?') {                return 'You must input a project name!';            } else if (!(/^[a-z][-a-z]*[a-z]$/.test(value.trim()))) {                return 'Please follow npm package name standard to use only lowercase characters(a-z) and hyphen(-)!';            }            const existedProjectName = getExistingProjectName();            if (!existedProjectName.includes(value.trim())) {                return true;            } else {                return `Current path already had a project named ${value.trim()}, please input the other name!`;            }        }    }, {        type: 'input',        name: 'projectDescription',        message: 'Please input your project description(Just hit enter to skip): '    }, {        type: 'input',        name: 'gitRepository',        message: 'Please input your project git repository(Just hit enter to skip): '    }];const getPageName = () => {    const inputPages = [];    for (const page of initMetaInfo.pages) {        inputPages.push(page.pageName);    }    const existingPages = getExistingPages();    return [...inputPages, ...existingPages];};const getPageComponentName = () => {    const selectedPage = initMetaInfo.selectedPage;    const inputPageComponents = [];    for (const component of initMetaInfo.pageComponents) {        if (component.underPageName === selectedPage) {            inputPageComponents.push(component.componentName);        }    }    const existingPageComponents = getExistingPageComponents(selectedPage);    return [...inputPageComponents, ...existingPageComponents];};const getSharedComponentName = () => {    const inputSharedComponents = [];    for (const component of initMetaInfo.sharedComponents) {        inputSharedComponents.push(component.componentName);    }    const existingSharedComponents = getExistingSharedComponent();    return [...inputSharedComponents, ...existingSharedComponents];};const getSharedContainerName = () => {    const inputSharedContainers = initMetaInfo.sharedContainers;    const existingSharedContainers = getExistingSharedContainer();    return [...inputSharedContainers, ...existingSharedContainers];};const askPageDetailsQueries = [    {        type: 'input',        name: 'pageName',        message: 'Please input your page name other than any existing pages or components: ',        default: '?', // Set default value to judge if enter page name or not        validate: (value) => {            if (value === '?') {                return 'You must input a page name!';            } else if (!(/^[A-Z]+[a-z0-9A-Z]*$/.test(value.trim()))) {                return 'Please follow CamelCase standard to name the page';            }            const existingName = getPageName();            if (!existingName.includes(value.trim())) {                return true;            } else {                return `Name ${chalk.yellow(value.trim())} is duplicate with existing pages, please type another name!`;            }        }    }, {        type: 'checkbox',        name: 'needFeatures',        message: 'Please check what features you need for this page(You can skip with hitting enter).',        choices: [            {                name: 'Need Service'            }, {                name: 'Need Validation'            }        ]    }, {        type: 'confirm',        name: 'designAgain',        message: 'Do you want to design more components (just hit enter for YES)?',        default: true    }];const askSharedContainerDetailsQueries = [    {        type: 'input',        name: 'containerName',        message: 'Please input your shared container name other than any existing pages or components: ',        default: '?', // Set default value to judge if enter page name or not        validate: (value) => {            if (value === '?') {                return 'You must input a container name!';            } else if (!(/^[A-Z]+[a-z0-9A-Z]*$/.test(value.trim()))) {                return 'Please follow CamelCase standard to name the container';            }            const existingName = getSharedContainerName();            if (!existingName.includes(value.trim())) {                return true;            } else {                return `Name ${chalk.yellow(value.trim())} is duplicate with existing shared container please type another name!`;            }        }    }, {        type: 'confirm',        name: 'designAgain',        message: 'Do you want to design more components (just hit enter for YES)?',        default: true    }];const askSharedComponentDetailsQueries = [    {        type: 'list',        name: 'componentType',        message: 'Please select component type: ',        choices: ['Template', 'Organism', 'Molecule', 'Atom']    }, {        type: 'input',        name: 'componentName',        message: 'Please input your shared component name other than any existing pages or components: ',        default: '?', // Set default value to judge if enter page name or not        validate: (value) => {            if (value === '?') {                return 'You must input a component name!';            } else if (!(/^[A-Z]+[a-z0-9A-Z]*$/.test(value.trim()))) {                return 'Please follow CamelCase standard to name the component';            }            const existingName = getSharedComponentName();            if (!existingName.includes(value.trim())) {                return true;            } else {                return `Name ${chalk.yellow(value.trim())} is duplicate with existing shared components, please type another name!`;            }        }    }, {        type: 'confirm',        name: 'designAgain',        message: 'Do you want to design more components (just hit enter for YES)?',        default: true    }];const askPageComponentDetailsQueries = () => {    const pagesNameToChoose = getPageName();    return [        {            type: 'list',            name: 'underPageName',            message: 'Please select add to which page: ',            choices: pagesNameToChoose        }, {            when: (selectedItem) => {                initMetaInfo.selectedPage = selectedItem.underPageName;            }        }, {            type: 'list',            name: 'componentType',            message: 'Please select component type: ',            choices: ['Template', 'Organism', 'Molecule', 'Atom']        }, {            type: 'input',            name: 'componentName',            message: 'Please input your component name other than any existing component name under current page: ',            default: '?', // Set default value to judge if enter page name or not            validate: (value) => {                if (value === '?') {                    return 'You must input a component name!';                } else if (!(/^[A-Z]+[a-z0-9A-Z]*$/.test(value.trim()))) {                    return 'Please follow CamelCase standard to name the component';                }                const existingName = getPageComponentName();                if (!existingName.includes(value.trim())) {                    return true;                } else {                    return `Name ${chalk.yellow(value.trim())} is duplicate with existing components under current page, please type another name!`;                }            }        }, {            type: 'confirm',            name: 'designAgain',            message: 'Do you want to design more components (just hit enter for YES)?',            default: true        }    ];};const askPageDetails = () => {    inquirer.prompt(askPageDetailsQueries).then((answers) => {        answers.pageName = answers.pageName.trim();        initMetaInfo.pages.push(answers);        if (answers.designAgain) {            askItemDetailsForDesign();        } else {            endsWithAskingForIndexPage();        }    });};const askPageComponentDetails = () => {    inquirer.prompt(askPageComponentDetailsQueries()).then((answers) => {        answers.componentName = answers.componentName.trim();        initMetaInfo.pageComponents.push(answers);        if (answers.designAgain) {            askItemDetailsForDesign();        } else {            endsWithAskingForIndexPage();        }    });};const askSharedComponentDetails = () => {    inquirer.prompt(askSharedComponentDetailsQueries).then((answers) => {        answers.componentName = answers.componentName.trim();        initMetaInfo.sharedComponents.push(answers);        if (answers.designAgain) {            askItemDetailsForDesign();        } else {            endsWithAskingForIndexPage();        }    });};const askSharedContainerDetails = () => {    inquirer.prompt(askSharedContainerDetailsQueries).then((answers) => {        initMetaInfo.sharedContainers.push(answers.containerName.trim());        if (answers.designAgain) {            askItemDetailsForDesign();        } else {            endsWithAskingForIndexPage();        }    });};const endsWithAskingForIndexPage = () => {    inquirer.prompt([        {            type: 'list',            name: 'indexPage',            message: 'Please select one page as index page: ',            choices: getPageName()        }]).then((answers) => {            initMetaInfo.indexPage = answers.indexPage;            const processingMessage = new ProcessMessage();            processingMessage.start();            if (initMetaInfo.command === 'init') {                initAppWithMetaInfo(initMetaInfo);                processingMessage.complete();                logger.info(`Please follow ${chalk.yellow('Atomic Design Pattern')} to design each page of your app.`);                logger.info(`For more information about ${chalk.yellow('Atomic Design Pattern')}, please refer to http://bradfrost.com/blog/post/atomic-web-design/`);                logger.info('Please configure the endponits/namespace/baseUrl of your pages in config/* which already mark the comment and give some example.');            } else {                designItemsWithMetaInfo(initMetaInfo);                processingMessage.complete();                logger.info('Please configure the endpoints and reducers of the added components or pages in the profile file under config/* which already mark the comment and give some example.');            }            process.exit();        });};const askItemDetailsForDesign = () => {    const existingPages = getPageName();    const expectChoices = existingPages.length > 0 ? ['Add Page', 'Add Shared Component', 'Add Shared Container', 'Add Component into Existing Page'] : ['Add Page', 'Add Shared Component', 'Add Shared Container'];    inquirer.prompt([{        type: 'list',        name: 'designOption',        message: 'Please select the action type you want to do: ',        choices: expectChoices    }]).then((answers) => {        if (answers.designOption === 'Add Page') {            askPageDetails();        } else if (answers.designOption === 'Add Shared Component') {            askSharedComponentDetails();        } else if (answers.designOption === 'Add Shared Container') {            askSharedContainerDetails();        } else {            askPageComponentDetails();        }    });};/* Create Command */program    .version(`${cbPackageJson.version}`)    .command('create')    .description('Create an example app OR create a plain customized app Or create a plain content app')    .action(() => {        createCommandAction();    });/* Initializing Command */program    .command('init')    .description('Initialize the workspace')    .action(() => {        const existedPages = getExistingPages();        const existedSharedComponent = getExistingSharedComponent();        const existedSharedContainer = getExistingSharedContainer();        if (existedPages.length > 0 || existedSharedComponent.length > 0 || existedSharedContainer.length > 0) {            logger.error(`You ${chalk.red('already initialized')} your app! Please use ${chalk.yellow('dw-dev design')} to customize more pages.`);            process.exit();        } else {            initMetaInfo.command = 'init';            askItemDetailsForDesign();        }    });/* Design Command */program    .command('design')    .description('Design page or shared component or shared container or component under specific page.')    .action(() => {        const existedPages = getExistingPages();        const existedSharedComponent = getExistingSharedComponent();        const existedSharedContainer = getExistingSharedContainer();        if (existedPages.length > 0 || existedSharedComponent.length > 0 || existedSharedContainer.length > 0) {            initMetaInfo.command = 'design';            askItemDetailsForDesign('design');        } else {            logger.error(`You ${chalk.red('have not initialized')} your app! Please use ${chalk.yellow('dw-dev init')} to init your app first.`);            process.exit();        }    });program.parse(process.argv);// If no any args, show the command list for helpif (!program.args.length) {    program.help();}
