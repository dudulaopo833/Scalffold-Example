import fs from 'fs';import jsonfile from 'jsonfile';import handlebars from 'handlebars';import { join, split } from 'lodash';import shell from 'shelljs';// import acorn from 'acorn';import locater from 'locater';import insertLine from 'insert-line';import { scanPackageToMergeDependencies, mergePeerToDependencies, getPackageGreaterVersion, excludeDevDependencies,    splitVersion, getCurrentDir, createAppStructureWithMetaInfo, handleHBSData, getDataFromAcornParsedData } from '../../src/tools/utils';const acorn = require('acorn-object-spread');const pwd = getCurrentDir();jsonfile.readFileSync = jest.fn((location) => {    const packageJsonPath = `${pwd}/package.json`;    const routerPath = `${pwd}/node_modules/group-digital-wealth-router/package.json`;    const errorPath = `${pwd}/node_modules/group-digital-wealth-error-handling/package.json`;    const validationPath = `${pwd}/node_modules/group-digital-wealth-validation/package.json`;    switch (location) {        case packageJsonPath :            return {                'scripts': {                    'build': 'npm run lint && rimraf bin && better-npm-run build',                    'test': 'eslint test && jest'                },                'dependencies': {                    'babel-cli': '^6.24.1',                    'shelljs': '^6.24.1',                    'group-digital-wealth-router': '^1.0.0',                    'group-digital-wealth-error-handling': '^1.0.0',                    'group-digital-wealth-validation': '^1.0.0'                }            };        case routerPath :            return {                'peerDependencies': {                    'babel-loader': '^6.24.2', // exclude to merge                    'shelljs': '~7.24.1',                    'style-loader': '^7.1.1'                }            };        case errorPath :            return {                'peerDependencies': {                    'shelljs': '^7.24.1',                    'css-loader': '7.1.1',                    'sass-loader': '^2.1.5'                }            };        case validationPath :            return {                'peerDependencies': {                    'babel-loader': '^6.24.2', // exclude to merge                    'css-loader': '~7.0.1',                    'sass-loader': '^2.0.5'                }            };        default :            return {};    }});jsonfile.writeFileSync = jest.fn(() => {    // mock write file});describe('Test utils/scanPackageToMergeDependencies', () => {    test('Test splitVersion function', () => {        [            ['^2.0.2', { 'prefix': '^', 'versionNumber': '2.0.2' }],            ['2.0.3', { 'prefix': '', 'versionNumber': '2.0.3' }],            ['~2.9.7', { 'prefix': '~', 'versionNumber': '2.9.7' }]        ].forEach((version) => {            const versionName = version[0];            const finalResult = version[1];            const result = splitVersion(versionName);            expect(result).toEqual(finalResult);        });    });    test('Test excludeDevDependencies function', () => {        [            ['babel-plugin-xx', true],            ['demo-babel', true],            ['eslint-plugin-xx', true],            ['demo-eslint', true],            ['webpack-plugin-xx', true],            ['demo-webpack', true],            ['commander', false],            ['requirer', false]        ].forEach((packageToTest) => {            const packageName = packageToTest[0];            const expectResult = packageToTest[1];            const result = excludeDevDependencies(packageName);            expect(result).toBe(expectResult);        });    });    test('Test getPackageGreaterVersion function', () => {        [            ['^0.3.4', '^0.3.4', { 'prefix': '^', 'versionNumber': '0.3.4' }], // equal            ['~1.3.4', '~1.3.4', { 'prefix': '~', 'versionNumber': '1.3.4' }], // equal            ['2.3.4', '2.3.4', { 'prefix': '', 'versionNumber': '2.3.4' }], // equal            ['2.3.4', '^2.3.4', { 'prefix': '^', 'versionNumber': '2.3.4' }], // equal            ['^2.3.4', '2.3.4', { 'prefix': '^', 'versionNumber': '2.3.4' }], // equal            ['^2.3.4', '~2.3.4', { 'prefix': '^', 'versionNumber': '2.3.4' }], // equal            ['~2.3.4', '^2.3.4', { 'prefix': '^', 'versionNumber': '2.3.4' }], // equal            ['~2.3.4', '2.3.4', { 'prefix': '~', 'versionNumber': '2.3.4' }], // equal            ['2.3.4', '~2.3.4', { 'prefix': '~', 'versionNumber': '2.3.4' }], // equal            ['0.3.5', '0.3.4', { 'prefix': '', 'versionNumber': '0.3.5' }],            ['^0.4.4', '0.3.4', { 'prefix': '^', 'versionNumber': '0.4.4' }],            ['~0.4.0', '0.3.4', { 'prefix': '~', 'versionNumber': '0.4.0' }],            ['1.3.4', '^0.3.4', { 'prefix': '', 'versionNumber': '1.3.4' }],            ['1.0.0', '~0.3.4', { 'prefix': '', 'versionNumber': '1.0.0' }],            ['^2.1.0', '^2.0.4', { 'prefix': '^', 'versionNumber': '2.1.0' }],            ['~0.3.4', '~0.3.5', { 'prefix': '~', 'versionNumber': '0.3.5' }],            ['^0.3.4', '~0.4.4', { 'prefix': '~', 'versionNumber': '0.4.4' }],            ['0.3.4', '^0.4.0', { 'prefix': '^', 'versionNumber': '0.4.0' }],            ['0.3.4', '1.3.4', { 'prefix': '', 'versionNumber': '1.3.4' }],            ['0.3.4', '^1.0.0', { 'prefix': '^', 'versionNumber': '1.0.0' }],            ['^2.0.4', '^2.1.0', { 'prefix': '^', 'versionNumber': '2.1.0' }]        ].forEach((version) => {            const firstV = version[0];            const secondV = version[1];            const final = version[2];            const result = getPackageGreaterVersion(firstV, secondV);            expect(result).toEqual(final);        });    });    test('Test mergePeerToDependencies function', () => {        [            [ // no duplicate package                {                    'dependencies': {                        'babel-cli': '^6.24.1',                        'babel-core': '^6.24.1'                    }                },                {                    'peerDependencies': {                        'shelljs': '^7.2.2',                        'verdaccio': '^7.1.1'                    }                },                {                    'dependencies': {                        'babel-cli': '^6.24.1',                        'babel-core': '^6.24.1',                        'shelljs': '^7.2.2',                        'verdaccio': '^7.1.1'                    }                }            ],            [ // duplicate package                {                    'dependencies': {                        'verdaccio': '^6.24.1',                        'shelljs': '^6.24.1'                    }                },                {                    'peerDependencies': {                        'verdaccio': '^7.2.2',                        'shelljs': '~7.1.1'                    }                },                {                    'dependencies': {                        'verdaccio': '^7.2.2',                        'shelljs': '~7.1.1'                    }                }            ],            [ // has exlcude package                {                    'dependencies': {                        'babel-cli': '^6.24.1',                        'babel-core': '^6.24.1'                    }                },                {                    'peerDependencies': {                        'babel-plugin-tcomb': '^0.3.24',                        'shelljs': '^7.1.1'                    }                },                {                    'dependencies': {                        'babel-cli': '^6.24.1',                        'babel-core': '^6.24.1',                        'shelljs': '^7.1.1'                    }                }            ],            [ // has exclude package, has no duplicate package, has duplicate package                {                    'dependencies': {                        'shelljs': '^6.24.1',                        'babel-core': '^6.24.1'                    }                },                {                    'peerDependencies': {                        'babel-plugin-tcomb': '^0.3.24',                        'case-sensitive-paths-webpack-plugin': '^2.1.1',                        'shelljs': '6.24.5',                        'better-npm-run': '0.0.15'                    }                },                {                    'dependencies': {                        'shelljs': '6.24.5',                        'babel-core': '^6.24.1',                        'better-npm-run': '0.0.15'                    }                }            ]        ].forEach((item) => {            const originContent = item[0];            const mergeContent = item[1];            const finalContent = item[2];            const result = mergePeerToDependencies(originContent, mergeContent);            expect(result).toEqual(finalContent);        });    });    test('Test scanPackageToMergeDependencies function', () => {        const expectResult = {            'scripts': {                'build': 'npm run lint && rimraf bin && better-npm-run build',                'test': 'eslint test && jest'            },            'dependencies': {                'babel-cli': '^6.24.1',                'group-digital-wealth-router': '^1.0.0',                'group-digital-wealth-error-handling': '^1.0.0',                'group-digital-wealth-validation': '^1.0.0',                'style-loader': '^7.1.1',                'shelljs': '^7.24.1',                'css-loader': '7.1.1',                'sass-loader': '^2.1.5'            }        };        const result = scanPackageToMergeDependencies();        expect(result).toEqual(expectResult);    });});const mockCopyWebpackConfig = jest.fn((pwd) => {    const sourceDir = `${pwd}/configuration/webpackConfig/configs`;    const mockpwd = pwd.concat('/test/initFolder');    fs.readdirSync(sourceDir).forEach((templateFileName) => {        shell.cp('-f', `${sourceDir}/${templateFileName}`, `${mockpwd}/webpack/${templateFileName}`);    });    const pluginDir = `${pwd}/configuration/webpackConfig/plugins`;    fs.readdirSync(pluginDir).forEach((templateFileName) => {        shell.cp('-f', `${pluginDir}/${templateFileName}`, `${mockpwd}/webpack/plugins/${templateFileName}`);    });});const mockCopyPackagesConfig = jest.fn((pwd) => {    const mockpwd = pwd.concat('/test/initFolder');    const sourceDirwithoutDot = `${pwd}/configuration/packagesConfig/withoutDot`;    fs.readdirSync(sourceDirwithoutDot).forEach((templateFileName) => {        shell.cp('-f', `${sourceDirwithoutDot}/${templateFileName}`, `${mockpwd}/${templateFileName}`);    });    const sourceDirwithDot = `${pwd}/configuration/packagesConfig/withDot`;    fs.readdirSync(sourceDirwithDot).forEach((templateFileName) => {        shell.cp('-f', `${sourceDirwithDot}/${templateFileName}`, `${mockpwd}/.${templateFileName}`);    });});const mockCopyAppTemplate = (pwd) => {    const mockpwd = pwd.concat('/test/initFolder');    const templateSourceDir = `${pwd}/configuration/appTemplates/indexTemplates`;    fs.readdirSync(templateSourceDir).forEach((templateFileName) => {        shell.cp('-f', `${templateSourceDir}/${templateFileName}`, `${mockpwd}/src/${templateFileName}`);    });    const routersSourceDir = `${pwd}/configuration/appTemplates/routesTemplates`;    fs.readdirSync(routersSourceDir).forEach((templateFileName) => {        shell.cp('-f', `${routersSourceDir}/${templateFileName}`, `${mockpwd}/src/routes/${templateFileName}`);    });    const styleSourceDir = `${pwd}/configuration/appTemplates/styleTemplates`;    fs.readdirSync(styleSourceDir).forEach((templateFileName) => {        shell.cp('-f', `${styleSourceDir}/${templateFileName}`, `${mockpwd}/src/styles/${templateFileName}`);    });    const fontSourceDir = `${pwd}/configuration/appTemplates/fonts`;    fs.readdirSync(fontSourceDir).forEach((templateFileName) => {        shell.cp('-f', `${fontSourceDir}/${templateFileName}`, `${mockpwd}/src/styles/fonts/${templateFileName}`);    });    const serverSourceDir = `${pwd}/configuration/appTemplates/serverTemplates`;    fs.readdirSync(serverSourceDir).forEach((templateFileName) => {        shell.cp('-f', `${serverSourceDir}/${templateFileName}`, `${mockpwd}/server/${templateFileName}`);    });    const imageDir = `${pwd}/configuration/appTemplates/background.jpg`;    shell.cp('-f', `${imageDir}`, `${mockpwd}/src/images/background.jpg`);    const contentDir = `${pwd}/configuration/appTemplates/content/index.js`;    shell.cp('-f', `${contentDir}`, `${mockpwd}/content/index.js`);};const mockHandleAppTemplates = (pwd) => {    const data = {        'indexPage': 'home',        'pages': [            {                'pageLoaderName': 'loadDashboard',                'pageName': 'dashboard',                'reducerName': 'dashboardReducer'            }, {                'pageLoaderName': 'loadHome',                'pageName': 'home',                'reducerName': 'homeReducer'            }, {                'pageLoaderName': 'loadFhc',                'pageName': 'fhc',                'reducerName': 'fhcReducer'            }        ],        'servicePages': [            { 'pageName': 'dashboard' },            { 'pageName': 'fhc' }        ]    };    const mockpwd = pwd.concat('/test/initFolder');    const configSourceDir = `${pwd}/configuration/appTemplates/configTemplates`;    fs.readdirSync(configSourceDir).forEach((templateFileName) => {        const convertTemplateSrc = fs.readFileSync(`${configSourceDir}/${templateFileName}`).toString();        const convertTemplate = handlebars.compile(convertTemplateSrc);        const content = convertTemplate(data);        const finalFileName = join(split(templateFileName, '.', 2), '.');        const destFilePath = `${mockpwd}/config/${finalFileName}`;        shell.touch(destFilePath);        fs.writeFileSync(destFilePath, content);    });    const stateSourceDir = `${pwd}/configuration/appTemplates/stateTemplates`;    fs.readdirSync(stateSourceDir).forEach((templateFileName) => {        const convertTemplateSrc = fs.readFileSync(`${stateSourceDir}/${templateFileName}`).toString();        const convertTemplate = handlebars.compile(convertTemplateSrc);        const content = convertTemplate(data);        const finalFileName = join(split(templateFileName, '.', 2), '.');        const destFilePath = `${mockpwd}/src/state/${finalFileName}`;        shell.touch(destFilePath);        fs.writeFileSync(destFilePath, content);    });};describe('Test create structure and copy config according to command answers', () => {    test('Test handleHBSData', () => {        const answers = {            'pages': [                {                    'pageName': 'dashboard',                    'needService': true,                    'needValidation': false,                    'askAgain': true                },                {                    'pageName': 'home',                    'needService': false,                    'needValidation': false,                    'askAgain': true                },                {                    'pageName': 'fhc',                    'needService': true,                    'needValidation': true,                    'askAgain': false                }            ],            'indexPage': 'home',            'needExampleApp': true        };        const expectResult = {            'indexPage': 'home',            'pages': [                {                    'pageLoaderName': 'loadDashboard',                    'pageName': 'dashboard',                    'reducerName': 'dashboardReducer'                }, {                    'pageLoaderName': 'loadHome',                    'pageName': 'home',                    'reducerName': 'homeReducer'                }, {                    'pageLoaderName': 'loadFhc',                    'pageName': 'fhc',                    'reducerName': 'fhcReducer'                }            ],            'servicePages': [                { 'pageName': 'dashboard' },                { 'pageName': 'fhc' }            ]        };        const result = handleHBSData(answers);        expect(result).toEqual(expectResult);    });    test('Test all the function under initAppwithMetaInfo', () => {        const answers = {            'pages': [                {                    'pageName': 'dashboard',                    'needService': true,                    'needValidation': false,                    'indexPage': false,                    'askAgain': true                },                {                    'pageName': 'home',                    'needService': false,                    'needValidation': false,                    'indexPage': true,                    'askAgain': true                },                {                    'pageName': 'fhc',                    'needService': true,                    'needValidation': true,                    'indexPage': false,                    'askAgain': false                }            ],            'needExampleApp': true        };        const mockpwd = `${pwd}/test/initFolder`;        createAppStructureWithMetaInfo(mockpwd, answers.pages);        mockCopyWebpackConfig(pwd);        mockCopyPackagesConfig(pwd);        mockCopyAppTemplate(pwd);        mockHandleAppTemplates(pwd);    });});describe('Test acorn usage', () => {    test('Test parse function', () => {        const pwd = getCurrentDir();        const testFilePwd = `${pwd}/test/acornTestFile.js`;        const fileString = fs.readFileSync(testFilePwd).toString();        const result = acorn.parse(fileString, { sourceType: 'module', plugins: { objectSpread: true } });        fs.writeFileSync(`${pwd}/test/acornOutputJson.js`, JSON.stringify(result));    });    test('Test write a file', () => {        const pwd = getCurrentDir();        const importContent = 'import alma from "alma";\nimport alma2 from "alma2"';        const varaiableContent = `const abc = 1;const dbc = 2;`;        const exportContent = `const bdc = [    {        abc: 1,        dbc: 2    },    {        abc: 3,        dbc: 4    }];export default abc;`;        const content = `${importContent}\n${varaiableContent}\n${exportContent}`;        fs.writeFileSync(`${pwd}/test/writeTestFile.js`, content);    });    test('Test get data from acorn parse json', () => {        const pwd = getCurrentDir();        const testFilePwd = `${pwd}/test/acornOutputJson.backup.js`;        const data = JSON.parse(fs.readFileSync(testFilePwd).toString());        const result = getDataFromAcornParsedData(data.body);        const expectImportResult = [            {                'name': 'en',                'value': 'react-intl/locale-data/en'            }, {                'name': 'zh',                'value': 'react-intl/locale-data/zh'            }, {                'name': 'loadAlma1',                'value': 'bundle-loader?lazy!../src/pages/alma1'            }, {                'name': 'loadAlma2',                'value': 'bundle-loader?lazy!../src/pages/alma2'            }        ];        const expectObjectVariableResult = {        };        const expectResult = {            'importArray': expectImportResult,            'objectVariable': expectObjectVariableResult        };        expect(result).toEqual(expectResult);    });});describe.only('Test insert-line and locater usage', () => {    test('Test search lineNumber with locater', () => {        const pwd = getCurrentDir();        const inputFile = fs.readFileSync(`${pwd}/test/fileToLocateLine.js`, { encoding: 'utf8' });        const pageLoaderLine = locater.find('insertPageLoaderFlag', inputFile);        console.log(pageLoaderLine); // eslint-disable-line no-console        const pageLoaderObjectLine = locater.find('insertPageLoaderObjectFlag', inputFile);        console.log(pageLoaderObjectLine); // eslint-disable-line no-console        const indexPageLine = locater.find('updateIndexPageFlag', inputFile);        console.log(indexPageLine); // eslint-disable-line no-console    });    test('Test insertLine according to lineNumber', () => {        const pwd = getCurrentDir();        insertLine(`${pwd}/test/fileToInsertLine.js`)            .contentSync('import loadTest from "bundle-loader?lazy!../src/pages/Test";')            .at(7);    });    test.only('Test insertLine according to lineNumber and locate the line again', () => {        const pwd = getCurrentDir();        const filePath = `${pwd}/test/fileToInsertLineAndLocate.js`;        insertLine(filePath)            .contentSync('import loadTest from "bundle-loader?lazy!../src/pages/Test";')            .at(7);        let inputFile = fs.readFileSync(filePath, { encoding: 'utf8' });        let newLine = locater.find('insertPageLoaderObjectFlag', inputFile);        const object = `\t{\n\t\tpageId: 'test',\n\t\tpageLoader: loadTest,\n\t\tnextPage: '' // nextPage can be a string or a object, You can refer to example app!\n\t},`;        insertLine(filePath)            .contentSync(object).at(newLine[0].line + 1);        inputFile = fs.readFileSync(filePath, { encoding: 'utf8' });        newLine = locater.find('updateIndexPageFlag', inputFile);        insertLine(filePath)            .contentSync('const indexPage = "test"; // Please do not insert any line between this line and the above comment line!', { overwrite: true }).at(newLine[0].line + 1);    });});
